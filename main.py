#!/usr/bin/env python3
"""
Script Principal para An√°lisis de Series Temporales

Este script proporciona una interfaz unificada para ejecutar todos los
componentes del an√°lisis de series temporales.

Uso:
    python main.py --modo [analisis|dashboard|notebook]
    
Opciones:
    analisis  : Ejecuta el an√°lisis b√°sico y genera reportes
    dashboard : Lanza el dashboard web interactivo
    notebook  : Abre Jupyter Lab con el notebook de an√°lisis
    completo  : Ejecuta an√°lisis y lanza dashboard
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path

# Agregar src al path
sys.path.append('src')

def verificar_estructura():
    """Verifica que la estructura de directorios sea correcta"""
    directorios_requeridos = [
        'src', 'data', 'data/raw', 'data/processed', 
        'notebooks', 'visualizations'
    ]
    
    for directorio in directorios_requeridos:
        Path(directorio).mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ Estructura de directorios verificada")

def verificar_dependencias():
    """Verifica que las dependencias est√©n instaladas"""
    try:
        import pandas
        import matplotlib
        import seaborn
        import plotly
        import jupyter
        import dash
        print("‚úÖ Dependencias verificadas")
        return True
    except ImportError as e:
        print(f"‚ùå Dependencia faltante: {e}")
        print("   Ejecuta: pip install -r requirements.txt")
        return False

def ejecutar_analisis():
    """Ejecuta el an√°lisis b√°sico de las series"""
    print("üîÑ Ejecutando an√°lisis b√°sico...")
    
    try:
        # Importar y ejecutar an√°lisis
        from src.analizar_series import construir_modelo
        from src.utils import limpiar_dataframe
        from src.generar_dataframe_categorias import generar_dataframes_categorias
        
        archivo_excel = 'data/raw/Datos_Series_Leo.xlsx'
        
        if not os.path.exists(archivo_excel):
            print(f"‚ùå No se encontr√≥ el archivo: {archivo_excel}")
            print("   Por favor, coloca el archivo en la carpeta data/raw/")
            return False
        
        # Cargar y procesar datos
        metadatos, datos = construir_modelo(archivo_excel)
        datos = limpiar_dataframe(datos)
        
        # Generar an√°lisis por categor√≠as
        metadatos_validos = metadatos.dropna(subset=['tipo', 'categoria'])
        series_validas = metadatos_validos['id_serie'].unique()
        datos_finales = datos[datos['id_serie'].isin(series_validas)]
        
        df_por_tipo, df_por_categoria = generar_dataframes_categorias(
            metadatos_validos, datos_finales
        )
        
        # Crear directorio de salida
        Path('data/processed').mkdir(parents=True, exist_ok=True)
        
        # Exportar res√∫menes
        import pandas as pd
        
        resumen_tipos = pd.DataFrame([
            {"tipo": tipo, "series": df['id_serie'].nunique(), "registros": len(df)}
            for tipo, df in df_por_tipo.items()
        ])
        resumen_tipos.to_csv("data/processed/resumen_por_tipo.csv", index=False)
        
        resumen_categorias = pd.DataFrame([
            {"categoria": cat, "series": df['id_serie'].nunique(), "registros": len(df)}
            for cat, df in df_por_categoria.items()
        ])
        resumen_categorias.to_csv("data/processed/resumen_por_categoria.csv", index=False)
        
        print("‚úÖ An√°lisis completado exitosamente")
        print("üìÅ Archivos generados en data/processed/:")
        print("   - resumen_por_tipo.csv")
        print("   - resumen_por_categoria.csv")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante el an√°lisis: {e}")
        return False

def lanzar_dashboard():
    """Lanza el dashboard web interactivo"""
    print("üöÄ Lanzando dashboard web...")
    
    try:
        from visualizations.dashboard import SeriesTemporalesDashboard
        
        dashboard = SeriesTemporalesDashboard()
        dashboard.run(debug=False)
        
    except Exception as e:
        print(f"‚ùå Error al lanzar dashboard: {e}")
        return False

def abrir_notebook():
    """Abre Jupyter Lab con el notebook de an√°lisis"""
    print("üìì Abriendo Jupyter Lab...")
    
    try:
        # Cambiar al directorio del proyecto
        os.chdir('notebooks')
        
        # Lanzar Jupyter Lab
        subprocess.run(['jupyter', 'lab', 'analisis_exploratorio.ipynb'])
        
    except Exception as e:
        print(f"‚ùå Error al abrir notebook: {e}")
        return False

def mostrar_ayuda():
    """Muestra informaci√≥n de ayuda"""
    print("""
üî¨ An√°lisis de Series Temporales - Gu√≠a de Uso
===============================================

Este proyecto te permite analizar series temporales desde archivos Excel 
con m√∫ltiples opciones de visualizaci√≥n.

üìÅ Estructura del Proyecto:
‚îú‚îÄ‚îÄ src/                    # C√≥digo fuente
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ raw/               # Datos originales (coloca aqu√≠ tu Excel)
‚îÇ   ‚îî‚îÄ‚îÄ processed/         # Datos procesados
‚îú‚îÄ‚îÄ notebooks/             # Jupyter notebooks
‚îú‚îÄ‚îÄ visualizations/        # Dashboard web
‚îî‚îÄ‚îÄ requirements.txt       # Dependencias

üöÄ Modos de Ejecuci√≥n:

1. An√°lisis B√°sico:
   python main.py --modo analisis
   
2. Dashboard Web Interactivo:
   python main.py --modo dashboard
   
3. Jupyter Notebook:
   python main.py --modo notebook
   
4. An√°lisis Completo + Dashboard:
   python main.py --modo completo

üìã Requisitos:
- Archivo 'Datos_Series_Leo.xlsx' en data/raw/
- Python 3.8+ con dependencias instaladas
- pip install -r requirements.txt

üí° Recomendaciones:
- Usa 'completo' para an√°lisis completo con visualizaciones
- Usa 'notebook' para an√°lisis interactivo y exploraci√≥n
- Usa 'dashboard' para presentaciones y demos
""")

def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(
        description='An√°lisis de Series Temporales'
    )
    parser.add_argument(
        '--modo', 
        choices=['analisis', 'dashboard', 'notebook', 'completo', 'help'],
        default='help',
        help='Modo de ejecuci√≥n'
    )
    
    args = parser.parse_args()
    
    print("üî¨ An√°lisis de Series Temporales")
    print("=" * 50)
    
    if args.modo == 'help':
        mostrar_ayuda()
        return
    
    # Verificaciones previas
    verificar_estructura()
    
    if not verificar_dependencias():
        print("\n‚ùå Por favor, instala las dependencias antes de continuar:")
        print("   pip install -r requirements.txt")
        return
    
    # Ejecutar seg√∫n el modo seleccionado
    if args.modo == 'analisis':
        ejecutar_analisis()
        
    elif args.modo == 'dashboard':
        lanzar_dashboard()
        
    elif args.modo == 'notebook':
        abrir_notebook()
        
    elif args.modo == 'completo':
        if ejecutar_analisis():
            print("\n" + "="*50)
            lanzar_dashboard()
    
    print("\nüéØ Proceso completado")

if __name__ == '__main__':
    main() 